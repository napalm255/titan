---
AWSTemplateFormatVersion: "2010-09-09"
Description: Titan Agents WebSocket API

Parameters:
  lambdaWebSocketName:
    Type: String
    Description: Lambda WebSocket function name
  lambdaWebSocketExecutionRoleName:
    Type: String
    Description: Lambda WebSocket execution role name
  lambdaAuthorizerName:
    Type: String
    Description: Lambda Authorizer function name
  lambdaAuthorizerExecutionRoleName:
    Type: String
    Description: Lambda Authorizer execution role name
  lambdaBucket:
    Type: String
    Description: S3 bucket name
  lambdaKey:
    Type: String
    Description: S3 key
  dynamoDbTable:
    Type: String
    Description: DynamoDB table name

Resources:
  webSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: titanWebSocketApi
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  webSocketApiAuthorizerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: webSocketApiPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt lambdaAuthorizer.Arn

  webSocketApiAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      Name: titan-websocket-authorizer
      ApiId: !Ref webSocketApi
      AuthorizerType: REQUEST
      IdentitySource:
        - route.request.header.Auth
      AuthorizerUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaAuthorizer.Arn}/invocations
      AuthorizerCredentialsArn: !GetAtt webSocketApiAuthorizerRole.Arn

  webSocketRouteConnect:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref webSocketApi
      RouteKey: $connect
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref webSocketApiAuthorizer
      Target: !Sub "integrations/${webSocketIntegrationConnect}"

  webSocketIntegrationConnect:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref webSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaWebSocket.Arn}/invocations

  webSocketRouteDisconnect:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref webSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      Target: !Sub integrations/${webSocketIntegrationDisconnect}

  webSocketIntegrationDisconnect:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref webSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaWebSocket.Arn}/invocations

  webSocketRouteMessage:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref webSocketApi
      RouteKey: $default
      AuthorizationType: NONE
      Target: !Sub integrations/${webSocketIntegrationMessage}

  webSocketIntegrationMessage:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref webSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaWebSocket.Arn}/invocations

  webSocketApiDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - webSocketApiAuthorizer
      - webSocketRouteConnect
      - webSocketRouteDisconnect
      - webSocketRouteMessage
    Properties:
      ApiId: !Ref webSocketApi

  webSocketApiGatewayStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref webSocketApi
      StageName: prod
      DeploymentId: !Ref webSocketApiDeployment

  lambdaWebSocketExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref lambdaWebSocketExecutionRoleName
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: lambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:UpdateItem
                Resource: "*"

  lambdaWebSocketPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt lambdaWebSocket.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${webSocketApi.ApiId}/*

  lambdaWebSocketLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${lambdaWebSocketName}

  lambdaWebSocket:
    DependsOn:
      - lambdaWebSocketLogGroup
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref lambdaWebSocketName
      Description: Titan Agent WebSocket
      Handler: websocket.lambda_handler
      Runtime: python3.12
      Role: !GetAtt lambdaWebSocketExecutionRole.Arn
      MemorySize: 256
      Timeout: 30
      Code:
        S3Bucket: !Ref lambdaBucket
        S3Key: !Ref lambdaKey
      Environment:
        Variables:
          TABLE_NAME: !Ref dynamoDbTable

  lambdaAuthorizerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref lambdaAuthorizerExecutionRoleName
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: lambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource: "*"

  lambdaAuthorizerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt lambdaAuthorizer.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${webSocketApi.ApiId}/*

  lambdaAuthorizerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${lambdaAuthorizerName}

  lambdaAuthorizer:
    DependsOn:
      - lambdaAuthorizerLogGroup
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref lambdaAuthorizerName
      Description: Titan Agent WebSocket
      Handler: websocket_authorizer.lambda_handler
      Runtime: python3.12
      Role: !GetAtt lambdaAuthorizerExecutionRole.Arn
      MemorySize: 256
      Timeout: 30
      Code:
        S3Bucket: !Ref lambdaBucket
        S3Key: !Ref lambdaKey

Outputs:
  webSocketApiId:
    Description: WebSocket API ID
    Value: !Ref webSocketApi
  webSocketApiEndpoint:
    Description: WebSocket API endpoint
    Value: !Sub wss://${webSocketApi.ApiId}.execute-api.${AWS::Region}.amazonaws.com/prod/

