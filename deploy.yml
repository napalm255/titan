---
- name: deploy agent backend
  hosts: "{{ stage }}"
  connection: local
  gather_facts: false

  tasks:
    - name: generate version
      ansible.builtin.command: date +%Y%m%d_%H%M%S
      register: date
      when: not version
      changed_when: false

    - name: set version
      ansible.builtin.set_fact:
        version: "{{ date.stdout }}"
      when: not version

    - name: reset build directory
      ansible.builtin.file:
        dest: "{{ build.dir }}"
        state: "{{ item }}"
      loop:
        - absent
        - directory

    - name: copy lambda to build directory
      ansible.builtin.copy:
        src: "{{ lambda.dir }}/"
        dest: "{{ build.dir }}"

    - name: create lambda version file
      ansible.builtin.copy:
        content: "{{ version }}"
        dest: "{{ build.dir }}/VERSION"

    - name: generate requirements file
      ansible.builtin.command:
        cmd: pipenv requirements
        chdir: "{{ build.dir }}"
      register: python_requirements

    - name: create requirements file
      ansible.builtin.copy:
        content: "{{ python_requirements.stdout_lines[1:] | join('\n') }}"
        dest: "{{ build.dir }}/requirements.txt"

    - name: download requirements
      ansible.builtin.pip:
        chdir: "{{ build.dir }}"
        requirements: "{{ build.dir }}/requirements.txt"
        extra_args: --target {{ build.dir }}
        state: latest

    - name: package lambda
      community.general.archive:
        path: "{{ build.dir }}/*"
        dest: "{{ build.dir }}/{{ lambda.zip }}"
        format: zip

    - name: deploy bucket
      amazon.aws.cloudformation:
        region: "{{ regions[0] }}"
        stack_name: "{{ stacks.bucket }}"
        template_body: "{{ lookup('file', 'cloudformation/agents_bucket.yml') }}"
        state: present
        on_create_failure: DELETE
        template_parameters:
          bucketName: "{{ agents.bucket.name }}"
        tags:
          application: "{{ application }}"

    - name: list contents in bucket
      amazon.aws.s3_object:
        region: "{{ regions[0] }}"
        bucket: "{{ agents.bucket.name }}"
        mode: list
      register: bucket_list
      failed_when: false

    - name: upload lambda package to bucket
      amazon.aws.s3_object:
        region: "{{ regions[0] }}"
        bucket: "{{ agents.bucket.name }}"
        mode: put
        src: "{{ build.dir }}/{{ lambda.zip }}"
        object: "{{ lambda.zip }}"
        encrypt: true

    - name: deploy eventbus
      amazon.aws.cloudformation:
        region: "{{ regions[0] }}"
        stack_name: "{{ stacks.eventbus }}"
        template_body: "{{ lookup('file', 'cloudformation/eventbus.yml') }}"
        state: present
        on_create_failure: DELETE
        template_parameters:
          eventBusName: "{{ eventbus.name }}"
        tags:
          application: "{{ application }}"
      register: eventbus_stack

    - name: deploy cmk for dynamodb to {{ regions[0] }}
      amazon.aws.cloudformation:
        region: "{{ regions[0] }}"
        stack_name: "{{ stacks.cmk }}"
        template_body: "{{ lookup('file', 'cloudformation/agents_ddb_cmk.yml') }}"
        state: present
        on_create_failure: DELETE
        template_parameters:
          keyAlias: "{{ agents.ddb.cmk }}"
          lambdaRoleName: "{{ agents.lambda.websocket_role }}"
        tags:
          application: "{{ application }}"

    - name: deploy cmk for dynamodb to {{ regions[1] }}
      amazon.aws.cloudformation:
        region: "{{ regions[1] }}"
        stack_name: "{{ stacks.cmk }}"
        template_body: "{{ lookup('file', 'cloudformation/agents_ddb_cmk.yml') }}"
        state: present
        on_create_failure: DELETE
        template_parameters:
          keyAlias: "{{ agents.ddb.cmk }}"
          lambdaRoleName: "{{ agents.lambda.websocket_role }}"
        tags:
          application: "{{ application }}"
      when: enableReplica | bool

    - name: deploy dynamodb global table
      amazon.aws.cloudformation:
        region: "{{ regions[0] }}"
        stack_name: "{{ stacks.ddb }}"
        template_body: "{{ lookup('file', 'cloudformation/agents_ddb.yml') }}"
        state: present
        on_create_failure: DELETE
        template_parameters:
          tableName: "{{ agents.ddb.name}}"
          keyAlias: "{{ agents.ddb.cmk }}"
          enableReplica: "{{ enableReplica }}"
        tags:
          application: "{{ application }}"

    - name: deploy agents websocket api
      amazon.aws.cloudformation:
        region: "{{ regions[0] }}"
        stack_name: "{{ stacks.websocket }}"
        template_body: "{{ lookup('file', 'cloudformation/agents_websocket.yml') }}"
        state: present
        on_create_failure: DELETE
        template_parameters:
          lambdaWebSocketName: "{{ agents.lambda.websocket }}"
          lambdaWebSocketExecutionRoleName: "{{ agents.lambda.websocket_role }}"
          lambdaAuthorizerName: "{{ agents.lambda.authorizer }}"
          lambdaAuthorizerExecutionRoleName: "{{ agents.lambda.authorizer_role }}"
          lambdaBucket: "{{ agents.bucket.name }}"
          lambdaKey: "{{ lambda.zip }}"
          dynamoDbTable: "{{ agents.ddb.name }}"
          eventBusName: "{{ eventbus.name }}"
        tags:
          application: "{{ application }}"
      register: websocket_stack

    - name: create deployment for agents websocket api
      ansible.builtin.command: >
        aws apigatewayv2 create-deployment
        --api-id "{{ websocket_stack.stack_outputs.webSocketApiId }}"
        --stage-name prod
      environment:
        AWS_DEFAULT_REGION: "{{ regions[0] }}"

    - name: deploy agents sqs
      amazon.aws.cloudformation:
        region: "{{ regions[0] }}"
        stack_name: "{{ stacks.sqs }}"
        template_body: "{{ lookup('file', 'cloudformation/agents_sqs.yml') }}"
        state: present
        on_create_failure: DELETE
        template_parameters:
          queueName: "{{ agents.sqs.name }}"
          lambdaSqsName: "{{ agents.lambda.sqs }}"
          lambdaBucket: "{{ agents.bucket.name }}"
          lambdaKey: "{{ lambda.zip }}"
          webSocketConnectionsUrl: "{{ websocket_stack.stack_outputs.webSocketConnectionsUrl}}"
        tags:
          application: "{{ application }}"

    - name: delete old contents in bucket
      amazon.aws.s3_object:
        region: "{{ regions[0] }}"
        bucket: "{{ agents.bucket.name }}"
        mode: delobj
        object: "{{ item }}"
      loop: "{{ bucket_list.s3_keys }}"
      when:
        - "'s3_keys' in bucket_list"
        - item != lambda.zip

    - name: display connection details
      debug:
        msg: |
          {{ websocket_stack.stack_outputs.webSocketUrl }}
